/*
 * generated by Xtext 2.22.0
 */
package com.coffee.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class HlvlGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendedModelsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtendedModelsListOfModelRefParserRuleCall_2_1_0 = (RuleCall)cExtendedModelsAssignment_2_1.eContents().get(0);
		private final Keyword cElementsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsElmDeclarationParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRelationsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRelationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRelationsRelDeclarationParserRuleCall_6_0 = (RuleCall)cRelationsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cOperationsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOperationsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOperationsOperationsParserRuleCall_7_1_0 = (RuleCall)cOperationsAssignment_7_1.eContents().get(0);
		
		///**
		// * Grammar specification of the HLVL, High Level Variability Language
		// * @author Angela Villota
		// * @version HLVL V1.4
		// * August 2018
		// * Modified in October 4th for including the root constraint
		// * Modified on October 9th for fixing the setRefinement
		// * Modified on November 16th 2018
		// * Modified on January 2019 to include conditional and quantified implies
		// * Modified on April 2019
		// * Modified July 2019 to adjust the syntax with the MODEVAR paper syntax
		// * Modified on July 15 to refine the constantvalues (eliminated the production Value)
		// */ Model:
		//	'model' name=ID ('extends' extendedModels+=ListOfModelRef)? //Coffee Junior 
		//	'elements:' elements+=ElmDeclaration*
		//	'relations:' relations+=RelDeclaration* ('operations:' operations=Operations)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'model' name=ID ('extends' extendedModels+=ListOfModelRef)? //Coffee Junior 
		//'elements:' elements+=ElmDeclaration* 'relations:' relations+=RelDeclaration* ('operations:' operations=Operations)?
		public Group getGroup() { return cGroup; }
		
		//'model'
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extendedModels+=ListOfModelRef)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extendedModels+=ListOfModelRef
		public Assignment getExtendedModelsAssignment_2_1() { return cExtendedModelsAssignment_2_1; }
		
		//ListOfModelRef
		public RuleCall getExtendedModelsListOfModelRefParserRuleCall_2_1_0() { return cExtendedModelsListOfModelRefParserRuleCall_2_1_0; }
		
		////Coffee Junior 
		//'elements:'
		public Keyword getElementsKeyword_3() { return cElementsKeyword_3; }
		
		//elements+=ElmDeclaration*
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }
		
		//ElmDeclaration
		public RuleCall getElementsElmDeclarationParserRuleCall_4_0() { return cElementsElmDeclarationParserRuleCall_4_0; }
		
		//'relations:'
		public Keyword getRelationsKeyword_5() { return cRelationsKeyword_5; }
		
		//relations+=RelDeclaration*
		public Assignment getRelationsAssignment_6() { return cRelationsAssignment_6; }
		
		//RelDeclaration
		public RuleCall getRelationsRelDeclarationParserRuleCall_6_0() { return cRelationsRelDeclarationParserRuleCall_6_0; }
		
		//('operations:' operations=Operations)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'operations:'
		public Keyword getOperationsKeyword_7_0() { return cOperationsKeyword_7_0; }
		
		//operations=Operations
		public Assignment getOperationsAssignment_7_1() { return cOperationsAssignment_7_1; }
		
		//Operations
		public RuleCall getOperationsOperationsParserRuleCall_7_1_0() { return cOperationsOperationsParserRuleCall_7_1_0; }
	}
	public class ListOfModelRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ListOfModelRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListOfModelRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIdsModelCrossReference_1_0 = (CrossReference)cIdsAssignment_1.eContents().get(0);
		private final RuleCall cIdsModelIDTerminalRuleCall_1_0_1 = (RuleCall)cIdsModelCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIdsModelCrossReference_2_1_0 = (CrossReference)cIdsAssignment_2_1.eContents().get(0);
		private final RuleCall cIdsModelIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIdsModelCrossReference_2_1_0.eContents().get(1);
		
		//ListOfModelRef:
		//	{ListOfModelRef} ids+=[Model] (','+ ids+=[Model])* //Coffee Junior (Como excluir el modelo propio de las referencias?)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListOfModelRef} ids+=[Model] (','+ ids+=[Model])*
		public Group getGroup() { return cGroup; }
		
		//{ListOfModelRef}
		public Action getListOfModelRefAction_0() { return cListOfModelRefAction_0; }
		
		//ids+=[Model]
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }
		
		//[Model]
		public CrossReference getIdsModelCrossReference_1_0() { return cIdsModelCrossReference_1_0; }
		
		//ID
		public RuleCall getIdsModelIDTerminalRuleCall_1_0_1() { return cIdsModelIDTerminalRuleCall_1_0_1; }
		
		//(','+ ids+=[Model])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','+
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ids+=[Model]
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }
		
		//[Model]
		public CrossReference getIdsModelCrossReference_2_1_0() { return cIdsModelCrossReference_2_1_0; }
		
		//ID
		public RuleCall getIdsModelIDTerminalRuleCall_2_1_0_1() { return cIdsModelIDTerminalRuleCall_2_1_0_1; }
	}
	public class ElmDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ElmDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cElmDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAttAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAttAttKeyword_1_0 = (Keyword)cAttAssignment_1.eContents().get(0);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cDataTypeAlternatives_2_0 = (Alternatives)cDataTypeAssignment_2.eContents().get(0);
		private final Keyword cDataTypeBooleanKeyword_2_0_0 = (Keyword)cDataTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cDataTypeIntegerKeyword_2_0_1 = (Keyword)cDataTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cDataTypeSymbolicKeyword_2_0_2 = (Keyword)cDataTypeAlternatives_2_0.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDeclarationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclarationDeclarationParserRuleCall_4_0 = (RuleCall)cDeclarationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommentKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cCommentAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCommentSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cCommentAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//// modified by avillota to comply with the modevar paper syntax	
		//ElmDeclaration:
		//	{ElmDeclaration} att='att'?
		//	//(inst= 'instantiable' '[' min=INT ',' max=INT ']')?
		//	dataType=('boolean' | 'integer' | 'symbolic') name=ID //reemplaza a {ElmDeclaration} ??
		//	declaration=Declaration ('comment:' '{' comment=STRING '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ElmDeclaration} att='att'? //(inst= 'instantiable' '[' min=INT ',' max=INT ']')?
		//dataType=('boolean' | 'integer' | 'symbolic') name=ID //reemplaza a {ElmDeclaration} ??
		//declaration=Declaration ('comment:' '{' comment=STRING '}')?
		public Group getGroup() { return cGroup; }
		
		//{ElmDeclaration}
		public Action getElmDeclarationAction_0() { return cElmDeclarationAction_0; }
		
		//att='att'?
		public Assignment getAttAssignment_1() { return cAttAssignment_1; }
		
		//'att'
		public Keyword getAttAttKeyword_1_0() { return cAttAttKeyword_1_0; }
		
		////(inst= 'instantiable' '[' min=INT ',' max=INT ']')?
		//dataType=('boolean' | 'integer' | 'symbolic')
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }
		
		//('boolean' | 'integer' | 'symbolic')
		public Alternatives getDataTypeAlternatives_2_0() { return cDataTypeAlternatives_2_0; }
		
		//'boolean'
		public Keyword getDataTypeBooleanKeyword_2_0_0() { return cDataTypeBooleanKeyword_2_0_0; }
		
		//'integer'
		public Keyword getDataTypeIntegerKeyword_2_0_1() { return cDataTypeIntegerKeyword_2_0_1; }
		
		//'symbolic'
		public Keyword getDataTypeSymbolicKeyword_2_0_2() { return cDataTypeSymbolicKeyword_2_0_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		////reemplaza a {ElmDeclaration} ??
		//declaration=Declaration
		public Assignment getDeclarationAssignment_4() { return cDeclarationAssignment_4; }
		
		//Declaration
		public RuleCall getDeclarationDeclarationParserRuleCall_4_0() { return cDeclarationDeclarationParserRuleCall_4_0; }
		
		//('comment:' '{' comment=STRING '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'comment:'
		public Keyword getCommentKeyword_5_0() { return cCommentKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//comment=STRING
		public Assignment getCommentAssignment_5_2() { return cCommentAssignment_5_2; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_5_2_0() { return cCommentSTRINGTerminalRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//	ConstantDecl | VariableDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstantDecl | VariableDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstantDecl
		public RuleCall getConstantDeclParserRuleCall_0() { return cConstantDeclParserRuleCall_0; }
		
		//VariableDecl
		public RuleCall getVariableDeclParserRuleCall_1() { return cVariableDeclParserRuleCall_1; }
	}
	public class ConstantDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ConstantDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueRelationalParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		
		//ConstantDecl:
		//	{ConstantDecl} ('is' value=Relational)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantDecl} ('is' value=Relational)?
		public Group getGroup() { return cGroup; }
		
		//{ConstantDecl}
		public Action getConstantDeclAction_0() { return cConstantDeclAction_0; }
		
		//('is' value=Relational)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'is'
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//value=Relational
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//Relational
		public RuleCall getValueRelationalParserRuleCall_1_1_0() { return cValueRelationalParserRuleCall_1_1_0; }
	}
	public class VariableDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.VariableDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVariantsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariantsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariantsOptionsDeclarationParserRuleCall_1_1_0 = (RuleCall)cVariantsAssignment_1_1.eContents().get(0);
		
		//VariableDecl:
		//	{VariableDecl} ('variants:' variants=OptionsDeclaration);
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableDecl} ('variants:' variants=OptionsDeclaration)
		public Group getGroup() { return cGroup; }
		
		//{VariableDecl}
		public Action getVariableDeclAction_0() { return cVariableDeclAction_0; }
		
		//('variants:' variants=OptionsDeclaration)
		public Group getGroup_1() { return cGroup_1; }
		
		//'variants:'
		public Keyword getVariantsKeyword_1_0() { return cVariantsKeyword_1_0; }
		
		//variants=OptionsDeclaration
		public Assignment getVariantsAssignment_1_1() { return cVariantsAssignment_1_1; }
		
		//OptionsDeclaration
		public RuleCall getVariantsOptionsDeclarationParserRuleCall_1_1_0() { return cVariantsOptionsDeclarationParserRuleCall_1_1_0; }
	}
	public class OptionsDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.OptionsDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntervalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////Declaration of variants
		//OptionsDeclaration:
		//	Interval | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Interval | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Interval
		public RuleCall getIntervalParserRuleCall_0() { return cIntervalParserRuleCall_0; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_1() { return cEnumerationParserRuleCall_1; }
	}
	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Interval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartINTTerminalRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEndAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEndINTTerminalRuleCall_2_0 = (RuleCall)cEndAssignment_2.eContents().get(0);
		
		//// intervals (only intervals of enumerables)
		//Interval:
		//	start=INT '..' end=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//start=INT '..' end=INT
		public Group getGroup() { return cGroup; }
		
		//start=INT
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//INT
		public RuleCall getStartINTTerminalRuleCall_0_0() { return cStartINTTerminalRuleCall_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }
		
		//end=INT
		public Assignment getEndAssignment_2() { return cEndAssignment_2; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_2_0() { return cEndINTTerminalRuleCall_2_0; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cListListOfValuesParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// enumeration (enumeration of booleans, integers and symbols)
		//Enumeration:
		//	'[' list=ListOfValues ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' list=ListOfValues ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//list=ListOfValues
		public Assignment getListAssignment_1() { return cListAssignment_1; }
		
		//ListOfValues
		public RuleCall getListListOfValuesParserRuleCall_1_0() { return cListListOfValuesParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class RelDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.RelDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRelDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpRelationParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//RelDeclaration:
		//	{RelDeclaration} name=ID ':' exp=Relation;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelDeclaration} name=ID ':' exp=Relation
		public Group getGroup() { return cGroup; }
		
		//{RelDeclaration}
		public Action getRelDeclarationAction_0() { return cRelDeclarationAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//exp=Relation
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Relation
		public RuleCall getExpRelationParserRuleCall_3_0() { return cExpRelationParserRuleCall_3_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCommonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarListParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOrderParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDecompositionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cGroupParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cConstraintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cVisibilityParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cComplexImpliesParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cComplexMutexParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Relation:
		//	Common | Pair | VarList | Order | Decomposition | Group | Constraint | Visibility | ComplexImplies | ComplexMutex;
		@Override public ParserRule getRule() { return rule; }
		
		//Common | Pair | VarList | Order | Decomposition | Group | Constraint | Visibility | ComplexImplies | ComplexMutex
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Common
		public RuleCall getCommonParserRuleCall_0() { return cCommonParserRuleCall_0; }
		
		////Hierarchy |
		//Pair
		public RuleCall getPairParserRuleCall_1() { return cPairParserRuleCall_1; }
		
		//VarList
		public RuleCall getVarListParserRuleCall_2() { return cVarListParserRuleCall_2; }
		
		//Order
		public RuleCall getOrderParserRuleCall_3() { return cOrderParserRuleCall_3; }
		
		//Decomposition
		public RuleCall getDecompositionParserRuleCall_4() { return cDecompositionParserRuleCall_4; }
		
		//Group
		public RuleCall getGroupParserRuleCall_5() { return cGroupParserRuleCall_5; }
		
		////MultInstantiation|
		//Constraint
		public RuleCall getConstraintParserRuleCall_6() { return cConstraintParserRuleCall_6; }
		
		//Visibility
		public RuleCall getVisibilityParserRuleCall_7() { return cVisibilityParserRuleCall_7; }
		
		////QImplies|//|
		//ComplexImplies
		public RuleCall getComplexImpliesParserRuleCall_8() { return cComplexImpliesParserRuleCall_8; }
		
		//ComplexMutex
		public RuleCall getComplexMutexParserRuleCall_9() { return cComplexMutexParserRuleCall_9; }
	}
	public class CommonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Common");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCommonAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsListOfIDsParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Common:
		//	{Common} 'common' '(' elements=ListOfIDs ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Common} 'common' '(' elements=ListOfIDs ')'
		public Group getGroup() { return cGroup; }
		
		//{Common}
		public Action getCommonAction_0() { return cCommonAction_0; }
		
		//'common'
		public Keyword getCommonKeyword_1() { return cCommonKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//elements=ListOfIDs
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//ListOfIDs
		public RuleCall getElementsListOfIDsParserRuleCall_3_0() { return cElementsListOfIDsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorImpliesKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorMutexKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1ElmDeclarationCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1ElmDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1ElmDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVar2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cVar2ElmDeclarationCrossReference_4_0 = (CrossReference)cVar2Assignment_4.eContents().get(0);
		private final RuleCall cVar2ElmDeclarationIDTerminalRuleCall_4_0_1 = (RuleCall)cVar2ElmDeclarationCrossReference_4_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////MultInstantiation:
		////	'instantiable' name=[ElmDeclaration] '['min=Number ',' max=Number ']'
		////;
		////FIXME separate the simple implies and mutex
		//Pair:
		//	operator=('implies' | 'mutex') '(' var1=[ElmDeclaration] ',' var2=[ElmDeclaration] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=('implies' | 'mutex') '(' var1=[ElmDeclaration] ',' var2=[ElmDeclaration] ')'
		public Group getGroup() { return cGroup; }
		
		//operator=('implies' | 'mutex')
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//('implies' | 'mutex')
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }
		
		//'implies'
		public Keyword getOperatorImpliesKeyword_0_0_0() { return cOperatorImpliesKeyword_0_0_0; }
		
		//'mutex'
		public Keyword getOperatorMutexKeyword_0_0_1() { return cOperatorMutexKeyword_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var1=[ElmDeclaration]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }
		
		//[ElmDeclaration]
		public CrossReference getVar1ElmDeclarationCrossReference_2_0() { return cVar1ElmDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getVar1ElmDeclarationIDTerminalRuleCall_2_0_1() { return cVar1ElmDeclarationIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//var2=[ElmDeclaration]
		public Assignment getVar2Assignment_4() { return cVar2Assignment_4; }
		
		//[ElmDeclaration]
		public CrossReference getVar2ElmDeclarationCrossReference_4_0() { return cVar2ElmDeclarationCrossReference_4_0; }
		
		//ID
		public RuleCall getVar2ElmDeclarationIDTerminalRuleCall_4_0_1() { return cVar2ElmDeclarationIDTerminalRuleCall_4_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ComplexImpliesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ComplexImplies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImpliesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpRelationalParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsListOfIDsParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ComplexImplies:
		//	'implies' '(' '(' exp=Relational ')' ',' '[' elements=ListOfIDs ']' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'implies' '(' '(' exp=Relational ')' ',' '[' elements=ListOfIDs ']' ')'
		public Group getGroup() { return cGroup; }
		
		//'implies'
		public Keyword getImpliesKeyword_0() { return cImpliesKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//exp=Relational
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Relational
		public RuleCall getExpRelationalParserRuleCall_3_0() { return cExpRelationalParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//elements=ListOfIDs
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//ListOfIDs
		public RuleCall getElementsListOfIDsParserRuleCall_7_0() { return cElementsListOfIDsParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class ComplexMutexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ComplexMutex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMutexKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpRelationalParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cElementsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cElementsListOfIDsParserRuleCall_7_0 = (RuleCall)cElementsAssignment_7.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//ComplexMutex:
		//	'mutex' '(' '(' exp=Relational ')' ',' '[' elements=ListOfIDs ']' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'mutex' '(' '(' exp=Relational ')' ',' '[' elements=ListOfIDs ']' ')'
		public Group getGroup() { return cGroup; }
		
		//'mutex'
		public Keyword getMutexKeyword_0() { return cMutexKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//exp=Relational
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//Relational
		public RuleCall getExpRelationalParserRuleCall_3_0() { return cExpRelationalParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//elements=ListOfIDs
		public Assignment getElementsAssignment_7() { return cElementsAssignment_7; }
		
		//ListOfIDs
		public RuleCall getElementsListOfIDsParserRuleCall_7_0() { return cElementsListOfIDsParserRuleCall_7_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class VarListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.VarList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorImpliesKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorMutexKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVar1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVar1ElmDeclarationCrossReference_2_0 = (CrossReference)cVar1Assignment_2.eContents().get(0);
		private final RuleCall cVar1ElmDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVar1ElmDeclarationCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cListListOfIDsParserRuleCall_5_0 = (RuleCall)cListAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////FIXME commented to be redefined with a different syntax
		////QImplies:
		////	'[' mina=INT ',' maxa=INT ']' var1=[ElmDeclaration] 'implies'  '[' minb=INT ',' maxb=INT']' var2=[ElmDeclaration] 
		////;
		//VarList:
		//	operator=('implies' | 'mutex') '(' var1=[ElmDeclaration] ',' '[' list=ListOfIDs ']' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=('implies' | 'mutex') '(' var1=[ElmDeclaration] ',' '[' list=ListOfIDs ']' ')'
		public Group getGroup() { return cGroup; }
		
		//operator=('implies' | 'mutex')
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//('implies' | 'mutex')
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }
		
		//'implies'
		public Keyword getOperatorImpliesKeyword_0_0_0() { return cOperatorImpliesKeyword_0_0_0; }
		
		//'mutex'
		public Keyword getOperatorMutexKeyword_0_0_1() { return cOperatorMutexKeyword_0_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//var1=[ElmDeclaration]
		public Assignment getVar1Assignment_2() { return cVar1Assignment_2; }
		
		//[ElmDeclaration]
		public CrossReference getVar1ElmDeclarationCrossReference_2_0() { return cVar1ElmDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getVar1ElmDeclarationIDTerminalRuleCall_2_0_1() { return cVar1ElmDeclarationIDTerminalRuleCall_2_0_1; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//list=ListOfIDs
		public Assignment getListAssignment_5() { return cListAssignment_5; }
		
		//ListOfIDs
		public RuleCall getListListOfIDsParserRuleCall_5_0() { return cListListOfIDsParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class DecompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Decomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecompositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecompositionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParentElmDeclarationCrossReference_3_0 = (CrossReference)cParentAssignment_3.eContents().get(0);
		private final RuleCall cParentElmDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cParentElmDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cChildrenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChildrenListOfIDsParserRuleCall_6_0 = (RuleCall)cChildrenAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMinAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMinINTTerminalRuleCall_10_0 = (RuleCall)cMinAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMaxAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMaxINTTerminalRuleCall_12_0 = (RuleCall)cMaxAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		////Hierarchy:
		////	Decomposition|Group
		////;
		//// modified by avillota to comply with the modevar paper syntax
		//Decomposition:
		//	{Decomposition}
		//	'decomposition'
		//	'('
		//	parent=[ElmDeclaration]
		//	',' '[' children=ListOfIDs ']'
		//	// ')''<' cardinality=INT'>'
		//	',' '[' min=INT ',' max=INT ']'
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Decomposition} 'decomposition' '(' parent=[ElmDeclaration] ',' '[' children=ListOfIDs ']' // ')''<' cardinality=INT'>'
		//',' '[' min=INT ',' max=INT ']' ')'
		public Group getGroup() { return cGroup; }
		
		//{Decomposition}
		public Action getDecompositionAction_0() { return cDecompositionAction_0; }
		
		//'decomposition'
		public Keyword getDecompositionKeyword_1() { return cDecompositionKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parent=[ElmDeclaration]
		public Assignment getParentAssignment_3() { return cParentAssignment_3; }
		
		//[ElmDeclaration]
		public CrossReference getParentElmDeclarationCrossReference_3_0() { return cParentElmDeclarationCrossReference_3_0; }
		
		//ID
		public RuleCall getParentElmDeclarationIDTerminalRuleCall_3_0_1() { return cParentElmDeclarationIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//children=ListOfIDs
		public Assignment getChildrenAssignment_6() { return cChildrenAssignment_6; }
		
		//ListOfIDs
		public RuleCall getChildrenListOfIDsParserRuleCall_6_0() { return cChildrenListOfIDsParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//// ')''<' cardinality=INT'>'
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//min=INT
		public Assignment getMinAssignment_10() { return cMinAssignment_10; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_10_0() { return cMinINTTerminalRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//max=INT
		public Assignment getMaxAssignment_12() { return cMaxAssignment_12; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_12_0() { return cMaxINTTerminalRuleCall_12_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
	}
	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cParentElmDeclarationCrossReference_3_0 = (CrossReference)cParentAssignment_3.eContents().get(0);
		private final RuleCall cParentElmDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cParentElmDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cChildrenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChildrenListOfIDsParserRuleCall_6_0 = (RuleCall)cChildrenAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cMinAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cMinINTTerminalRuleCall_10_0 = (RuleCall)cMinAssignment_10.eContents().get(0);
		private final Keyword cCommaKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cMaxAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cMaxRangeParserRuleCall_12_0 = (RuleCall)cMaxAssignment_12.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cRightParenthesisKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		//// modified by avillota to comply with the modevar paper syntax
		//Group:
		//	{Group}
		//	'group'
		//	'('
		//	parent=[ElmDeclaration]
		//	',' '[' children=ListOfIDs ']'
		//	',' '[' min=INT ',' max=Range ']'
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Group} 'group' '(' parent=[ElmDeclaration] ',' '[' children=ListOfIDs ']' ',' '[' min=INT ',' max=Range ']' ')'
		public Group getGroup() { return cGroup; }
		
		//{Group}
		public Action getGroupAction_0() { return cGroupAction_0; }
		
		//'group'
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parent=[ElmDeclaration]
		public Assignment getParentAssignment_3() { return cParentAssignment_3; }
		
		//[ElmDeclaration]
		public CrossReference getParentElmDeclarationCrossReference_3_0() { return cParentElmDeclarationCrossReference_3_0; }
		
		//ID
		public RuleCall getParentElmDeclarationIDTerminalRuleCall_3_0_1() { return cParentElmDeclarationIDTerminalRuleCall_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_5() { return cLeftSquareBracketKeyword_5; }
		
		//children=ListOfIDs
		public Assignment getChildrenAssignment_6() { return cChildrenAssignment_6; }
		
		//ListOfIDs
		public RuleCall getChildrenListOfIDsParserRuleCall_6_0() { return cChildrenListOfIDsParserRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//','
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }
		
		//min=INT
		public Assignment getMinAssignment_10() { return cMinAssignment_10; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_10_0() { return cMinINTTerminalRuleCall_10_0; }
		
		//','
		public Keyword getCommaKeyword_11() { return cCommaKeyword_11; }
		
		//max=Range
		public Assignment getMaxAssignment_12() { return cMaxAssignment_12; }
		
		//Range
		public RuleCall getMaxRangeParserRuleCall_12_0() { return cMaxRangeParserRuleCall_12_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_13() { return cRightSquareBracketKeyword_13; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14() { return cRightParenthesisKeyword_14; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRangeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueWildcardParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Range:
		//	{Range} value=Wildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//{Range} value=Wildcard
		public Group getGroup() { return cGroup; }
		
		//{Range}
		public Action getRangeAction_0() { return cRangeAction_0; }
		
		//value=Wildcard
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Wildcard
		public RuleCall getValueWildcardParserRuleCall_1_0() { return cValueWildcardParserRuleCall_1_0; }
	}
	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Wildcard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Wildcard:
		//	INT | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class VisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Visibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisibilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionRelationalParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cListAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cListMixedListParserRuleCall_5_0 = (RuleCall)cListAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Visibility:
		//	'visibility' '(' condition=Relational ',' '[' list=MixedList ']' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'visibility' '(' condition=Relational ',' '[' list=MixedList ']' ')'
		public Group getGroup() { return cGroup; }
		
		//'visibility'
		public Keyword getVisibilityKeyword_0() { return cVisibilityKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Relational
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Relational
		public RuleCall getConditionRelationalParserRuleCall_2_0() { return cConditionRelationalParserRuleCall_2_0; }
		
		//','
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }
		
		//list=MixedList
		public Assignment getListAssignment_5() { return cListAssignment_5; }
		
		//MixedList
		public RuleCall getListMixedListParserRuleCall_5_0() { return cListMixedListParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cOperatorBeforeKeyword_0_0 = (Keyword)cOperatorAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAfterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLeftElmDeclarationCrossReference_1_1_0 = (CrossReference)cLeftAssignment_1_1.eContents().get(0);
		private final RuleCall cLeftElmDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLeftElmDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightListOfIDsParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		////List:
		////	ListOfIDs| ListOfRelRefs
		////;
		//Order:
		//	operator='before' | 'after' left=[ElmDeclaration] ',' '[' right+=ListOfIDs ']';
		@Override public ParserRule getRule() { return rule; }
		
		//operator='before' | 'after' left=[ElmDeclaration] ',' '[' right+=ListOfIDs ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//operator='before'
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//'before'
		public Keyword getOperatorBeforeKeyword_0_0() { return cOperatorBeforeKeyword_0_0; }
		
		//'after' left=[ElmDeclaration] ',' '[' right+=ListOfIDs ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//'after'
		public Keyword getAfterKeyword_1_0() { return cAfterKeyword_1_0; }
		
		//left=[ElmDeclaration]
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }
		
		//[ElmDeclaration]
		public CrossReference getLeftElmDeclarationCrossReference_1_1_0() { return cLeftElmDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLeftElmDeclarationIDTerminalRuleCall_1_1_0_1() { return cLeftElmDeclarationIDTerminalRuleCall_1_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_3() { return cLeftSquareBracketKeyword_1_3; }
		
		//right+=ListOfIDs
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }
		
		//ListOfIDs
		public RuleCall getRightListOfIDsParserRuleCall_1_4_0() { return cRightListOfIDsParserRuleCall_1_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_5() { return cRightSquareBracketKeyword_1_5; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Constraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpRelationalParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Constraint:
		//	'expression' '(' exp=Relational ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'expression' '(' exp=Relational ')'
		public Group getGroup() { return cGroup; }
		
		//'expression'
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//exp=Relational
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Relational
		public RuleCall getExpRelationalParserRuleCall_2_0() { return cExpRelationalParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class RelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Relational");
		private final RuleCall cIffParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Relational:
		//	Iff;
		@Override public ParserRule getRule() { return rule; }
		
		//Iff
		public RuleCall getIffParserRuleCall() { return cIffParserRuleCall; }
	}
	public class IffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Iff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImpliesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIffLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightImpliesParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Iff Relational:
		//	Implies ({Iff.left=current} "<=>" right=Implies)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Implies ({Iff.left=current} "<=>" right=Implies)*
		public Group getGroup() { return cGroup; }
		
		//Implies
		public RuleCall getImpliesParserRuleCall_0() { return cImpliesParserRuleCall_0; }
		
		//({Iff.left=current} "<=>" right=Implies)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Iff.left=current}
		public Action getIffLeftAction_1_0() { return cIffLeftAction_1_0; }
		
		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_1() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Implies
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Implies
		public RuleCall getRightImpliesParserRuleCall_1_2_0() { return cRightImpliesParserRuleCall_1_2_0; }
	}
	public class ImpliesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Implies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cImpliesLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Implies Relational:
		//	Or ({Implies.left=current} "=>" right=Or)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Or ({Implies.left=current} "=>" right=Or)*
		public Group getGroup() { return cGroup; }
		
		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }
		
		//({Implies.left=current} "=>" right=Or)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Implies.left=current}
		public Action getImpliesLeftAction_1_0() { return cImpliesLeftAction_1_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1() { return cEqualsSignGreaterThanSignKeyword_1_1; }
		
		//right=Or
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Or
		public RuleCall getRightOrParserRuleCall_1_2_0() { return cRightOrParserRuleCall_1_2_0; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Relational:
		//	And ({Or.left=current} "OR" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Relational:
		//	Equality ({And.left=current} "AND" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "AND" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "AND" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality Relational:
		//	Comparison ({Equality.left=current} op=("=" | "!=") right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} op=("=" | "!=") right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} op=("=" | "!=") right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//op=("=" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//("=" | "!=")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//"="
		public Keyword getOpEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignKeyword_1_1_0_0; }
		
		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison Relational:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }
		
		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }
		
		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//(">=" | "<=" | ">" | "<")
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }
		
		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }
		
		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }
		
		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }
		
		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}
	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus Relational:
		//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup() { return cGroup; }
		
		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}
	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpModKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv Relational:
		//	Primary ({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }
		
		//op=('*' | '/' | 'mod')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/' | 'mod')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//'mod'
		public Keyword getOpModKeyword_1_1_0_2() { return cOpModKeyword_1_1_0_2; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cRelationalParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNegationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnaryFunctionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cOpAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cOpAlternatives_2_1_0 = (Alternatives)cOpAssignment_2_1.eContents().get(0);
		private final Keyword cOpAbsKeyword_2_1_0_0 = (Keyword)cOpAlternatives_2_1_0.eContents().get(0);
		private final Keyword cOpSqrtKeyword_2_1_0_1 = (Keyword)cOpAlternatives_2_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_2_0 = (RuleCall)cExpressionAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInstancesAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cInstancesKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cElementAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cElementElmDeclarationCrossReference_3_3_0 = (CrossReference)cElementAssignment_3_3.eContents().get(0);
		private final RuleCall cElementElmDeclarationIDTerminalRuleCall_3_3_0_1 = (RuleCall)cElementElmDeclarationCrossReference_3_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cNumberAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cNumberINTTerminalRuleCall_3_5_0 = (RuleCall)cNumberAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEntailedAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cEntailedKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cElementAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final CrossReference cElementElmDeclarationCrossReference_4_3_0 = (CrossReference)cElementAssignment_4_3.eContents().get(0);
		private final RuleCall cElementElmDeclarationIDTerminalRuleCall_4_3_0_1 = (RuleCall)cElementElmDeclarationCrossReference_4_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cSelectedAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSelectedKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cElementAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final CrossReference cElementElmDeclarationCrossReference_5_3_0 = (CrossReference)cElementAssignment_5_3.eContents().get(0);
		private final RuleCall cElementElmDeclarationIDTerminalRuleCall_5_3_0_1 = (RuleCall)cElementElmDeclarationCrossReference_5_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cBinaryFunctionAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cOpAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Alternatives cOpAlternatives_6_1_0 = (Alternatives)cOpAssignment_6_1.eContents().get(0);
		private final Keyword cOpPowKeyword_6_1_0_0 = (Keyword)cOpAlternatives_6_1_0.eContents().get(0);
		private final Keyword cOpDistKeyword_6_1_0_1 = (Keyword)cOpAlternatives_6_1_0.eContents().get(1);
		private final Keyword cOpMinKeyword_6_1_0_2 = (Keyword)cOpAlternatives_6_1_0.eContents().get(2);
		private final Keyword cOpMaxKeyword_6_1_0_3 = (Keyword)cOpAlternatives_6_1_0.eContents().get(3);
		private final Keyword cOpIfKeyword_6_1_0_4 = (Keyword)cOpAlternatives_6_1_0.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cLeftAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cLeftPrimaryParserRuleCall_6_3_0 = (RuleCall)cLeftAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cRightAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cRightPrimaryParserRuleCall_6_5_0 = (RuleCall)cRightAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final RuleCall cAtomicParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		////FIXME the assign production was commented to solve an inconsistency
		//Primary Relational:
		//	'(' Relational ')' | {Negation} "~" expression=Primary | {UnaryFunction} op=('abs' | 'sqrt') expression=Primary |
		//	{Instances} 'instances' '(' element=[ElmDeclaration] ',' number=INT ')' | {Entailed} 'entailed' '('
		//	element=[ElmDeclaration] ')' | {Selected} 'selected' '(' element=[ElmDeclaration] ')' | {BinaryFunction} op=('pow' |
		//	'dist' | 'min' | 'max' | 'if') '(' left=Primary ',' right=Primary ')' | Atomic;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Relational ')' | {Negation} "~" expression=Primary | {UnaryFunction} op=('abs' | 'sqrt') expression=Primary |
		//{Instances} 'instances' '(' element=[ElmDeclaration] ',' number=INT ')' | {Entailed} 'entailed' '('
		//element=[ElmDeclaration] ')' | {Selected} 'selected' '(' element=[ElmDeclaration] ')' | {BinaryFunction} op=('pow' |
		//'dist' | 'min' | 'max' | 'if') '(' left=Primary ',' right=Primary ')' | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Relational ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Relational
		public RuleCall getRelationalParserRuleCall_0_1() { return cRelationalParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{Negation} "~" expression=Primary
		public Group getGroup_1() { return cGroup_1; }
		
		//{Negation}
		public Action getNegationAction_1_0() { return cNegationAction_1_0; }
		
		//"~"
		public Keyword getTildeKeyword_1_1() { return cTildeKeyword_1_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }
		
		//{UnaryFunction} op=('abs' | 'sqrt') expression=Primary
		public Group getGroup_2() { return cGroup_2; }
		
		//{UnaryFunction}
		public Action getUnaryFunctionAction_2_0() { return cUnaryFunctionAction_2_0; }
		
		//op=('abs' | 'sqrt')
		public Assignment getOpAssignment_2_1() { return cOpAssignment_2_1; }
		
		//('abs' | 'sqrt')
		public Alternatives getOpAlternatives_2_1_0() { return cOpAlternatives_2_1_0; }
		
		//'abs'
		public Keyword getOpAbsKeyword_2_1_0_0() { return cOpAbsKeyword_2_1_0_0; }
		
		//'sqrt'
		public Keyword getOpSqrtKeyword_2_1_0_1() { return cOpSqrtKeyword_2_1_0_1; }
		
		//expression=Primary
		public Assignment getExpressionAssignment_2_2() { return cExpressionAssignment_2_2; }
		
		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_2_0() { return cExpressionPrimaryParserRuleCall_2_2_0; }
		
		//{Instances} 'instances' '(' element=[ElmDeclaration] ',' number=INT ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{Instances}
		public Action getInstancesAction_3_0() { return cInstancesAction_3_0; }
		
		//'instances'
		public Keyword getInstancesKeyword_3_1() { return cInstancesKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//element=[ElmDeclaration]
		public Assignment getElementAssignment_3_3() { return cElementAssignment_3_3; }
		
		//[ElmDeclaration]
		public CrossReference getElementElmDeclarationCrossReference_3_3_0() { return cElementElmDeclarationCrossReference_3_3_0; }
		
		//ID
		public RuleCall getElementElmDeclarationIDTerminalRuleCall_3_3_0_1() { return cElementElmDeclarationIDTerminalRuleCall_3_3_0_1; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//number=INT
		public Assignment getNumberAssignment_3_5() { return cNumberAssignment_3_5; }
		
		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_5_0() { return cNumberINTTerminalRuleCall_3_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
		
		//{Entailed} 'entailed' '(' element=[ElmDeclaration] ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{Entailed}
		public Action getEntailedAction_4_0() { return cEntailedAction_4_0; }
		
		//'entailed'
		public Keyword getEntailedKeyword_4_1() { return cEntailedKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//element=[ElmDeclaration]
		public Assignment getElementAssignment_4_3() { return cElementAssignment_4_3; }
		
		//[ElmDeclaration]
		public CrossReference getElementElmDeclarationCrossReference_4_3_0() { return cElementElmDeclarationCrossReference_4_3_0; }
		
		//ID
		public RuleCall getElementElmDeclarationIDTerminalRuleCall_4_3_0_1() { return cElementElmDeclarationIDTerminalRuleCall_4_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{Selected} 'selected' '(' element=[ElmDeclaration] ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{Selected}
		public Action getSelectedAction_5_0() { return cSelectedAction_5_0; }
		
		//'selected'
		public Keyword getSelectedKeyword_5_1() { return cSelectedKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//element=[ElmDeclaration]
		public Assignment getElementAssignment_5_3() { return cElementAssignment_5_3; }
		
		//[ElmDeclaration]
		public CrossReference getElementElmDeclarationCrossReference_5_3_0() { return cElementElmDeclarationCrossReference_5_3_0; }
		
		//ID
		public RuleCall getElementElmDeclarationIDTerminalRuleCall_5_3_0_1() { return cElementElmDeclarationIDTerminalRuleCall_5_3_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{BinaryFunction} op=('pow' | 'dist' | 'min' | 'max' | 'if') '(' left=Primary ',' right=Primary ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{BinaryFunction}
		public Action getBinaryFunctionAction_6_0() { return cBinaryFunctionAction_6_0; }
		
		//op=('pow' | 'dist' | 'min' | 'max' | 'if')
		public Assignment getOpAssignment_6_1() { return cOpAssignment_6_1; }
		
		//('pow' | 'dist' | 'min' | 'max' | 'if')
		public Alternatives getOpAlternatives_6_1_0() { return cOpAlternatives_6_1_0; }
		
		//'pow'
		public Keyword getOpPowKeyword_6_1_0_0() { return cOpPowKeyword_6_1_0_0; }
		
		//'dist'
		public Keyword getOpDistKeyword_6_1_0_1() { return cOpDistKeyword_6_1_0_1; }
		
		//'min'
		public Keyword getOpMinKeyword_6_1_0_2() { return cOpMinKeyword_6_1_0_2; }
		
		//'max'
		public Keyword getOpMaxKeyword_6_1_0_3() { return cOpMaxKeyword_6_1_0_3; }
		
		//'if'
		public Keyword getOpIfKeyword_6_1_0_4() { return cOpIfKeyword_6_1_0_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//left=Primary
		public Assignment getLeftAssignment_6_3() { return cLeftAssignment_6_3; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_6_3_0() { return cLeftPrimaryParserRuleCall_6_3_0; }
		
		//','
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }
		
		//right=Primary
		public Assignment getRightAssignment_6_5() { return cRightAssignment_6_5; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_6_5_0() { return cRightPrimaryParserRuleCall_6_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		////{Assign} variable= [ElmDeclaration] 'is' value=Relational| //value=Value| changed by avillota
		//Atomic
		public RuleCall getAtomicParserRuleCall_7() { return cAtomicParserRuleCall_7; }
	}
	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cBoolConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cValueAlternatives_0_1_0 = (Alternatives)cValueAssignment_0_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_1_0_0 = (Keyword)cValueAlternatives_0_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1_0_1 = (Keyword)cValueAlternatives_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cVariableRefAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cVariableElmDeclarationCrossReference_1_1_0 = (CrossReference)cVariableAssignment_1_1.eContents().get(0);
		private final RuleCall cVariableElmDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVariableElmDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttributeRefAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cAttributeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAttributeQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cAttributeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSymbolConstantAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cIntConstantAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		//Atomic Relational:
		//	{BoolConstant} value=('true' | 'false') | {VariableRef} variable=[ElmDeclaration] | {AttributeRef}
		//	attribute=QualifiedName | {SymbolConstant} value=STRING | {IntConstant} value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{BoolConstant} value=('true' | 'false') | {VariableRef} variable=[ElmDeclaration] | {AttributeRef}
		//attribute=QualifiedName | {SymbolConstant} value=STRING | {IntConstant} value=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{BoolConstant} value=('true' | 'false')
		public Group getGroup_0() { return cGroup_0; }
		
		//{BoolConstant}
		public Action getBoolConstantAction_0_0() { return cBoolConstantAction_0_0; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0_1_0() { return cValueAlternatives_0_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_1_0_0() { return cValueTrueKeyword_0_1_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1_0_1() { return cValueFalseKeyword_0_1_0_1; }
		
		//{VariableRef} variable=[ElmDeclaration]
		public Group getGroup_1() { return cGroup_1; }
		
		//{VariableRef}
		public Action getVariableRefAction_1_0() { return cVariableRefAction_1_0; }
		
		//variable=[ElmDeclaration]
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//[ElmDeclaration]
		public CrossReference getVariableElmDeclarationCrossReference_1_1_0() { return cVariableElmDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getVariableElmDeclarationIDTerminalRuleCall_1_1_0_1() { return cVariableElmDeclarationIDTerminalRuleCall_1_1_0_1; }
		
		//{AttributeRef} attribute=QualifiedName
		public Group getGroup_2() { return cGroup_2; }
		
		//{AttributeRef}
		public Action getAttributeRefAction_2_0() { return cAttributeRefAction_2_0; }
		
		//attribute=QualifiedName
		public Assignment getAttributeAssignment_2_1() { return cAttributeAssignment_2_1; }
		
		//QualifiedName
		public RuleCall getAttributeQualifiedNameParserRuleCall_2_1_0() { return cAttributeQualifiedNameParserRuleCall_2_1_0; }
		
		//{SymbolConstant} value=STRING
		public Group getGroup_3() { return cGroup_3; }
		
		//{SymbolConstant}
		public Action getSymbolConstantAction_3_0() { return cSymbolConstantAction_3_0; }
		
		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }
		
		//{IntConstant} value=INT
		public Group getGroup_4() { return cGroup_4; }
		
		//{IntConstant}
		public Action getIntConstantAction_4_0() { return cIntConstantAction_4_0; }
		
		//value=INT
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_4_1_0() { return cValueINTTerminalRuleCall_4_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cElementElmDeclarationCrossReference_0_0 = (CrossReference)cElementAssignment_0.eContents().get(0);
		private final RuleCall cElementElmDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cElementElmDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttElmDeclarationCrossReference_2_0 = (CrossReference)cAttAssignment_2.eContents().get(0);
		private final RuleCall cAttElmDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cAttElmDeclarationCrossReference_2_0.eContents().get(1);
		
		////extender para otros modelos
		//QualifiedName:
		//	element=[ElmDeclaration] '.' att=[ElmDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//element=[ElmDeclaration] '.' att=[ElmDeclaration]
		public Group getGroup() { return cGroup; }
		
		//element=[ElmDeclaration]
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }
		
		//[ElmDeclaration]
		public CrossReference getElementElmDeclarationCrossReference_0_0() { return cElementElmDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getElementElmDeclarationIDTerminalRuleCall_0_0_1() { return cElementElmDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//att=[ElmDeclaration]
		public Assignment getAttAssignment_2() { return cAttAssignment_2; }
		
		//[ElmDeclaration]
		public CrossReference getAttElmDeclarationCrossReference_2_0() { return cAttElmDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getAttElmDeclarationIDTerminalRuleCall_2_0_1() { return cAttElmDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class OperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Operations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperationParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpOperationParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		
		//// Coffee Junior
		//// QualifiedName:
		//// ID ("." ID)* 
		//// ;
		//Operations:
		//	op+=Operation (','+ op+=Operation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//op+=Operation (','+ op+=Operation)*
		public Group getGroup() { return cGroup; }
		
		//op+=Operation
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Operation
		public RuleCall getOpOperationParserRuleCall_0_0() { return cOpOperationParserRuleCall_0_0; }
		
		//(','+ op+=Operation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','+
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//op+=Operation
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//Operation
		public RuleCall getOpOperationParserRuleCall_1_1_0() { return cOpOperationParserRuleCall_1_1_0; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Operation");
		private final RuleCall cSampleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Operation:
		//	Sample;
		@Override public ParserRule getRule() { return rule; }
		
		//Sample
		public RuleCall getSampleParserRuleCall() { return cSampleParserRuleCall; }
	}
	public class SampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Sample");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSingleInstructionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameOperationNameParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValidConfAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cValidConfigurationKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValuationsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValuationsListOfValuationParserRuleCall_1_3_0 = (RuleCall)cValuationsAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Sample Operation:
		//	{SingleInstruction} name=OperationName | {ValidConf} 'validConfiguration' '(' valuations=ListOfValuation ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleInstruction} name=OperationName | {ValidConf} 'validConfiguration' '(' valuations=ListOfValuation ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SingleInstruction} name=OperationName
		public Group getGroup_0() { return cGroup_0; }
		
		//{SingleInstruction}
		public Action getSingleInstructionAction_0_0() { return cSingleInstructionAction_0_0; }
		
		//name=OperationName
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//OperationName
		public RuleCall getNameOperationNameParserRuleCall_0_1_0() { return cNameOperationNameParserRuleCall_0_1_0; }
		
		//{ValidConf} 'validConfiguration' '(' valuations=ListOfValuation ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{ValidConf}
		public Action getValidConfAction_1_0() { return cValidConfAction_1_0; }
		
		//'validConfiguration'
		public Keyword getValidConfigurationKeyword_1_1() { return cValidConfigurationKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//valuations=ListOfValuation
		public Assignment getValuationsAssignment_1_3() { return cValuationsAssignment_1_3; }
		
		//ListOfValuation
		public RuleCall getValuationsListOfValuationParserRuleCall_1_3_0() { return cValuationsListOfValuationParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class OperationNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.OperationName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cValidModelKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNumberOfConfigurationsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFindConfigurationKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFindAllConfigurationsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OperationName:
		//	'validModel' | 'numberOfConfigurations' | 'findConfiguration' | 'findAllConfigurations';
		@Override public ParserRule getRule() { return rule; }
		
		//'validModel' | 'numberOfConfigurations' | 'findConfiguration' | 'findAllConfigurations'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'validModel'
		public Keyword getValidModelKeyword_0() { return cValidModelKeyword_0; }
		
		//'numberOfConfigurations'
		public Keyword getNumberOfConfigurationsKeyword_1() { return cNumberOfConfigurationsKeyword_1; }
		
		//'findConfiguration'
		public Keyword getFindConfigurationKeyword_2() { return cFindConfigurationKeyword_2; }
		
		//'findAllConfigurations'
		public Keyword getFindAllConfigurationsKeyword_3() { return cFindAllConfigurationsKeyword_3; }
	}
	public class ListOfValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ListOfValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValuesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValuesRelationalParserRuleCall_0_0 = (RuleCall)cValuesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuesRelationalParserRuleCall_1_1_0 = (RuleCall)cValuesAssignment_1_1.eContents().get(0);
		
		/////**
		//// * Global constraints
		//// */
		////Global:
		////	op=GlobalOp '(' vars=ListOfIDs ')'   ( '[' values= ListOfListValues ']')? 
		////	;
		//// syntactic categories
		////
		////BoolVal: value=('true'|'false');
		////Number: value = INT ;
		////
		////Symbol:  value=STRING;
		////
		////Value: 
		////	Number|BoolVal|Symbol
		////;	
		////
		////DataType:
		////	 'boolean' |'integer'|'symbolic' ;
		//ListOfValues:
		//	values+=Relational (','+ values+=Relational)*
		//	//values+= Value (',' + values+= Value)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////FIXME Value for relational
		//values+=Relational (','+ values+=Relational)*
		public Group getGroup() { return cGroup; }
		
		////FIXME Value for relational
		//values+=Relational
		public Assignment getValuesAssignment_0() { return cValuesAssignment_0; }
		
		//Relational
		public RuleCall getValuesRelationalParserRuleCall_0_0() { return cValuesRelationalParserRuleCall_0_0; }
		
		//(','+ values+=Relational)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','+
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//values+=Relational
		public Assignment getValuesAssignment_1_1() { return cValuesAssignment_1_1; }
		
		//Relational
		public RuleCall getValuesRelationalParserRuleCall_1_1_0() { return cValuesRelationalParserRuleCall_1_1_0; }
	}
	public class ListOfIDsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ListOfIDs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListOfIDsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cValuesElmDeclarationCrossReference_1_0 = (CrossReference)cValuesAssignment_1.eContents().get(0);
		private final RuleCall cValuesElmDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cValuesElmDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cValuesElmDeclarationCrossReference_2_1_0 = (CrossReference)cValuesAssignment_2_1.eContents().get(0);
		private final RuleCall cValuesElmDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cValuesElmDeclarationCrossReference_2_1_0.eContents().get(1);
		
		//ListOfIDs:
		//	{ListOfIDs} values+=[ElmDeclaration] (','+ values+=[ElmDeclaration])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListOfIDs} values+=[ElmDeclaration] (','+ values+=[ElmDeclaration])*
		public Group getGroup() { return cGroup; }
		
		//{ListOfIDs}
		public Action getListOfIDsAction_0() { return cListOfIDsAction_0; }
		
		//values+=[ElmDeclaration]
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }
		
		//[ElmDeclaration]
		public CrossReference getValuesElmDeclarationCrossReference_1_0() { return cValuesElmDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getValuesElmDeclarationIDTerminalRuleCall_1_0_1() { return cValuesElmDeclarationIDTerminalRuleCall_1_0_1; }
		
		//(','+ values+=[ElmDeclaration])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','+
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//values+=[ElmDeclaration]
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }
		
		//[ElmDeclaration]
		public CrossReference getValuesElmDeclarationCrossReference_2_1_0() { return cValuesElmDeclarationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getValuesElmDeclarationIDTerminalRuleCall_2_1_0_1() { return cValuesElmDeclarationIDTerminalRuleCall_2_1_0_1; }
	}
	public class ListOfRelRefsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ListOfRelRefs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListOfRelRefsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIdsRelDeclarationCrossReference_1_0 = (CrossReference)cIdsAssignment_1.eContents().get(0);
		private final RuleCall cIdsRelDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cIdsRelDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIdsRelDeclarationCrossReference_2_1_0 = (CrossReference)cIdsAssignment_2_1.eContents().get(0);
		private final RuleCall cIdsRelDeclarationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIdsRelDeclarationCrossReference_2_1_0.eContents().get(1);
		
		//ListOfRelRefs:
		//	{ListOfRelRefs} ids+=[RelDeclaration] (','+ ids+=[RelDeclaration])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{ListOfRelRefs} ids+=[RelDeclaration] (','+ ids+=[RelDeclaration])*
		public Group getGroup() { return cGroup; }
		
		//{ListOfRelRefs}
		public Action getListOfRelRefsAction_0() { return cListOfRelRefsAction_0; }
		
		//ids+=[RelDeclaration]
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }
		
		//[RelDeclaration]
		public CrossReference getIdsRelDeclarationCrossReference_1_0() { return cIdsRelDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getIdsRelDeclarationIDTerminalRuleCall_1_0_1() { return cIdsRelDeclarationIDTerminalRuleCall_1_0_1; }
		
		//(','+ ids+=[RelDeclaration])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','+
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ids+=[RelDeclaration]
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }
		
		//[RelDeclaration]
		public CrossReference getIdsRelDeclarationCrossReference_2_1_0() { return cIdsRelDeclarationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getIdsRelDeclarationIDTerminalRuleCall_2_1_0_1() { return cIdsRelDeclarationIDTerminalRuleCall_2_1_0_1; }
	}
	public class MixedListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.MixedList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMixedListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cIdsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIdsNamedItemCrossReference_1_0 = (CrossReference)cIdsAssignment_1.eContents().get(0);
		private final RuleCall cIdsNamedItemIDTerminalRuleCall_1_0_1 = (RuleCall)cIdsNamedItemCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cIdsNamedItemCrossReference_2_1_0 = (CrossReference)cIdsAssignment_2_1.eContents().get(0);
		private final RuleCall cIdsNamedItemIDTerminalRuleCall_2_1_0_1 = (RuleCall)cIdsNamedItemCrossReference_2_1_0.eContents().get(1);
		
		//MixedList:
		//	{MixedList} ids+=[NamedItem] (','+ ids+=[NamedItem])*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MixedList} ids+=[NamedItem] (','+ ids+=[NamedItem])*
		public Group getGroup() { return cGroup; }
		
		//{MixedList}
		public Action getMixedListAction_0() { return cMixedListAction_0; }
		
		//ids+=[NamedItem]
		public Assignment getIdsAssignment_1() { return cIdsAssignment_1; }
		
		//[NamedItem]
		public CrossReference getIdsNamedItemCrossReference_1_0() { return cIdsNamedItemCrossReference_1_0; }
		
		//ID
		public RuleCall getIdsNamedItemIDTerminalRuleCall_1_0_1() { return cIdsNamedItemIDTerminalRuleCall_1_0_1; }
		
		//(','+ ids+=[NamedItem])*
		public Group getGroup_2() { return cGroup_2; }
		
		//','+
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//ids+=[NamedItem]
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }
		
		//[NamedItem]
		public CrossReference getIdsNamedItemCrossReference_2_1_0() { return cIdsNamedItemCrossReference_2_1_0; }
		
		//ID
		public RuleCall getIdsNamedItemIDTerminalRuleCall_2_1_0_1() { return cIdsNamedItemIDTerminalRuleCall_2_1_0_1; }
	}
	public class NamedItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.NamedItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cElmDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedItem:
		//	ElmDeclaration | RelDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ElmDeclaration | RelDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElmDeclaration
		public RuleCall getElmDeclarationParserRuleCall_0() { return cElmDeclarationParserRuleCall_0; }
		
		//RelDeclaration
		public RuleCall getRelDeclarationParserRuleCall_1() { return cRelDeclarationParserRuleCall_1; }
	}
	public class ValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.Valuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElementElmDeclarationCrossReference_1_0 = (CrossReference)cElementAssignment_1.eContents().get(0);
		private final RuleCall cElementElmDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cElementElmDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueRelationalParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// For configuration
		//Valuation: //FIXME Value for relational
		//	'(' element=[ElmDeclaration] ',' value=Relational ')' //value= Value ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////FIXME Value for relational
		//'(' element=[ElmDeclaration] ',' value=Relational ')'
		public Group getGroup() { return cGroup; }
		
		////FIXME Value for relational
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//element=[ElmDeclaration]
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//[ElmDeclaration]
		public CrossReference getElementElmDeclarationCrossReference_1_0() { return cElementElmDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getElementElmDeclarationIDTerminalRuleCall_1_0_1() { return cElementElmDeclarationIDTerminalRuleCall_1_0_1; }
		
		//','
		public Keyword getCommaKeyword_2() { return cCommaKeyword_2; }
		
		//value=Relational
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Relational
		public RuleCall getValueRelationalParserRuleCall_3_0() { return cValueRelationalParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ListOfValuationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.coffee.Hlvl.ListOfValuation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPairsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPairsValuationParserRuleCall_0_0 = (RuleCall)cPairsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPairsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPairsValuationParserRuleCall_1_1_0 = (RuleCall)cPairsAssignment_1_1.eContents().get(0);
		
		//ListOfValuation:
		//	pairs+=Valuation (','+ pairs+=Valuation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//pairs+=Valuation (','+ pairs+=Valuation)*
		public Group getGroup() { return cGroup; }
		
		//pairs+=Valuation
		public Assignment getPairsAssignment_0() { return cPairsAssignment_0; }
		
		//Valuation
		public RuleCall getPairsValuationParserRuleCall_0_0() { return cPairsValuationParserRuleCall_0_0; }
		
		//(','+ pairs+=Valuation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','+
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//pairs+=Valuation
		public Assignment getPairsAssignment_1_1() { return cPairsAssignment_1_1; }
		
		//Valuation
		public RuleCall getPairsValuationParserRuleCall_1_1_0() { return cPairsValuationParserRuleCall_1_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ListOfModelRefElements pListOfModelRef;
	private final ElmDeclarationElements pElmDeclaration;
	private final DeclarationElements pDeclaration;
	private final ConstantDeclElements pConstantDecl;
	private final VariableDeclElements pVariableDecl;
	private final OptionsDeclarationElements pOptionsDeclaration;
	private final IntervalElements pInterval;
	private final EnumerationElements pEnumeration;
	private final RelDeclarationElements pRelDeclaration;
	private final RelationElements pRelation;
	private final CommonElements pCommon;
	private final PairElements pPair;
	private final ComplexImpliesElements pComplexImplies;
	private final ComplexMutexElements pComplexMutex;
	private final VarListElements pVarList;
	private final DecompositionElements pDecomposition;
	private final GroupElements pGroup;
	private final RangeElements pRange;
	private final WildcardElements pWildcard;
	private final VisibilityElements pVisibility;
	private final OrderElements pOrder;
	private final ConstraintElements pConstraint;
	private final RelationalElements pRelational;
	private final IffElements pIff;
	private final ImpliesElements pImplies;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final PlusOrMinusElements pPlusOrMinus;
	private final MulOrDivElements pMulOrDiv;
	private final PrimaryElements pPrimary;
	private final AtomicElements pAtomic;
	private final QualifiedNameElements pQualifiedName;
	private final OperationsElements pOperations;
	private final OperationElements pOperation;
	private final SampleElements pSample;
	private final OperationNameElements pOperationName;
	private final ListOfValuesElements pListOfValues;
	private final ListOfIDsElements pListOfIDs;
	private final ListOfRelRefsElements pListOfRelRefs;
	private final MixedListElements pMixedList;
	private final NamedItemElements pNamedItem;
	private final ValuationElements pValuation;
	private final ListOfValuationElements pListOfValuation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public HlvlGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pListOfModelRef = new ListOfModelRefElements();
		this.pElmDeclaration = new ElmDeclarationElements();
		this.pDeclaration = new DeclarationElements();
		this.pConstantDecl = new ConstantDeclElements();
		this.pVariableDecl = new VariableDeclElements();
		this.pOptionsDeclaration = new OptionsDeclarationElements();
		this.pInterval = new IntervalElements();
		this.pEnumeration = new EnumerationElements();
		this.pRelDeclaration = new RelDeclarationElements();
		this.pRelation = new RelationElements();
		this.pCommon = new CommonElements();
		this.pPair = new PairElements();
		this.pComplexImplies = new ComplexImpliesElements();
		this.pComplexMutex = new ComplexMutexElements();
		this.pVarList = new VarListElements();
		this.pDecomposition = new DecompositionElements();
		this.pGroup = new GroupElements();
		this.pRange = new RangeElements();
		this.pWildcard = new WildcardElements();
		this.pVisibility = new VisibilityElements();
		this.pOrder = new OrderElements();
		this.pConstraint = new ConstraintElements();
		this.pRelational = new RelationalElements();
		this.pIff = new IffElements();
		this.pImplies = new ImpliesElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pPlusOrMinus = new PlusOrMinusElements();
		this.pMulOrDiv = new MulOrDivElements();
		this.pPrimary = new PrimaryElements();
		this.pAtomic = new AtomicElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pOperations = new OperationsElements();
		this.pOperation = new OperationElements();
		this.pSample = new SampleElements();
		this.pOperationName = new OperationNameElements();
		this.pListOfValues = new ListOfValuesElements();
		this.pListOfIDs = new ListOfIDsElements();
		this.pListOfRelRefs = new ListOfRelRefsElements();
		this.pMixedList = new MixedListElements();
		this.pNamedItem = new NamedItemElements();
		this.pValuation = new ValuationElements();
		this.pListOfValuation = new ListOfValuationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.coffee.Hlvl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///**
	// * Grammar specification of the HLVL, High Level Variability Language
	// * @author Angela Villota
	// * @version HLVL V1.4
	// * August 2018
	// * Modified in October 4th for including the root constraint
	// * Modified on October 9th for fixing the setRefinement
	// * Modified on November 16th 2018
	// * Modified on January 2019 to include conditional and quantified implies
	// * Modified on April 2019
	// * Modified July 2019 to adjust the syntax with the MODEVAR paper syntax
	// * Modified on July 15 to refine the constantvalues (eliminated the production Value)
	// */ Model:
	//	'model' name=ID ('extends' extendedModels+=ListOfModelRef)? //Coffee Junior 
	//	'elements:' elements+=ElmDeclaration*
	//	'relations:' relations+=RelDeclaration* ('operations:' operations=Operations)?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ListOfModelRef:
	//	{ListOfModelRef} ids+=[Model] (','+ ids+=[Model])* //Coffee Junior (Como excluir el modelo propio de las referencias?)
	//;
	public ListOfModelRefElements getListOfModelRefAccess() {
		return pListOfModelRef;
	}
	
	public ParserRule getListOfModelRefRule() {
		return getListOfModelRefAccess().getRule();
	}
	
	//// modified by avillota to comply with the modevar paper syntax	
	//ElmDeclaration:
	//	{ElmDeclaration} att='att'?
	//	//(inst= 'instantiable' '[' min=INT ',' max=INT ']')?
	//	dataType=('boolean' | 'integer' | 'symbolic') name=ID //reemplaza a {ElmDeclaration} ??
	//	declaration=Declaration ('comment:' '{' comment=STRING '}')?;
	public ElmDeclarationElements getElmDeclarationAccess() {
		return pElmDeclaration;
	}
	
	public ParserRule getElmDeclarationRule() {
		return getElmDeclarationAccess().getRule();
	}
	
	//Declaration:
	//	ConstantDecl | VariableDecl;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//ConstantDecl:
	//	{ConstantDecl} ('is' value=Relational)?;
	public ConstantDeclElements getConstantDeclAccess() {
		return pConstantDecl;
	}
	
	public ParserRule getConstantDeclRule() {
		return getConstantDeclAccess().getRule();
	}
	
	//VariableDecl:
	//	{VariableDecl} ('variants:' variants=OptionsDeclaration);
	public VariableDeclElements getVariableDeclAccess() {
		return pVariableDecl;
	}
	
	public ParserRule getVariableDeclRule() {
		return getVariableDeclAccess().getRule();
	}
	
	////Declaration of variants
	//OptionsDeclaration:
	//	Interval | Enumeration;
	public OptionsDeclarationElements getOptionsDeclarationAccess() {
		return pOptionsDeclaration;
	}
	
	public ParserRule getOptionsDeclarationRule() {
		return getOptionsDeclarationAccess().getRule();
	}
	
	//// intervals (only intervals of enumerables)
	//Interval:
	//	start=INT '..' end=INT;
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}
	
	//// enumeration (enumeration of booleans, integers and symbols)
	//Enumeration:
	//	'[' list=ListOfValues ']';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//RelDeclaration:
	//	{RelDeclaration} name=ID ':' exp=Relation;
	public RelDeclarationElements getRelDeclarationAccess() {
		return pRelDeclaration;
	}
	
	public ParserRule getRelDeclarationRule() {
		return getRelDeclarationAccess().getRule();
	}
	
	//Relation:
	//	Common | Pair | VarList | Order | Decomposition | Group | Constraint | Visibility | ComplexImplies | ComplexMutex;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//Common:
	//	{Common} 'common' '(' elements=ListOfIDs ')';
	public CommonElements getCommonAccess() {
		return pCommon;
	}
	
	public ParserRule getCommonRule() {
		return getCommonAccess().getRule();
	}
	
	////MultInstantiation:
	////	'instantiable' name=[ElmDeclaration] '['min=Number ',' max=Number ']'
	////;
	////FIXME separate the simple implies and mutex
	//Pair:
	//	operator=('implies' | 'mutex') '(' var1=[ElmDeclaration] ',' var2=[ElmDeclaration] ')';
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}
	
	//ComplexImplies:
	//	'implies' '(' '(' exp=Relational ')' ',' '[' elements=ListOfIDs ']' ')';
	public ComplexImpliesElements getComplexImpliesAccess() {
		return pComplexImplies;
	}
	
	public ParserRule getComplexImpliesRule() {
		return getComplexImpliesAccess().getRule();
	}
	
	//ComplexMutex:
	//	'mutex' '(' '(' exp=Relational ')' ',' '[' elements=ListOfIDs ']' ')';
	public ComplexMutexElements getComplexMutexAccess() {
		return pComplexMutex;
	}
	
	public ParserRule getComplexMutexRule() {
		return getComplexMutexAccess().getRule();
	}
	
	////FIXME commented to be redefined with a different syntax
	////QImplies:
	////	'[' mina=INT ',' maxa=INT ']' var1=[ElmDeclaration] 'implies'  '[' minb=INT ',' maxb=INT']' var2=[ElmDeclaration] 
	////;
	//VarList:
	//	operator=('implies' | 'mutex') '(' var1=[ElmDeclaration] ',' '[' list=ListOfIDs ']' ')';
	public VarListElements getVarListAccess() {
		return pVarList;
	}
	
	public ParserRule getVarListRule() {
		return getVarListAccess().getRule();
	}
	
	////Hierarchy:
	////	Decomposition|Group
	////;
	//// modified by avillota to comply with the modevar paper syntax
	//Decomposition:
	//	{Decomposition}
	//	'decomposition'
	//	'('
	//	parent=[ElmDeclaration]
	//	',' '[' children=ListOfIDs ']'
	//	// ')''<' cardinality=INT'>'
	//	',' '[' min=INT ',' max=INT ']'
	//	')';
	public DecompositionElements getDecompositionAccess() {
		return pDecomposition;
	}
	
	public ParserRule getDecompositionRule() {
		return getDecompositionAccess().getRule();
	}
	
	//// modified by avillota to comply with the modevar paper syntax
	//Group:
	//	{Group}
	//	'group'
	//	'('
	//	parent=[ElmDeclaration]
	//	',' '[' children=ListOfIDs ']'
	//	',' '[' min=INT ',' max=Range ']'
	//	')';
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}
	
	//Range:
	//	{Range} value=Wildcard;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Wildcard:
	//	INT | '*';
	public WildcardElements getWildcardAccess() {
		return pWildcard;
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}
	
	//Visibility:
	//	'visibility' '(' condition=Relational ',' '[' list=MixedList ']' ')';
	public VisibilityElements getVisibilityAccess() {
		return pVisibility;
	}
	
	public ParserRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}
	
	////List:
	////	ListOfIDs| ListOfRelRefs
	////;
	//Order:
	//	operator='before' | 'after' left=[ElmDeclaration] ',' '[' right+=ListOfIDs ']';
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//Constraint:
	//	'expression' '(' exp=Relational ')';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Relational:
	//	Iff;
	public RelationalElements getRelationalAccess() {
		return pRelational;
	}
	
	public ParserRule getRelationalRule() {
		return getRelationalAccess().getRule();
	}
	
	//Iff Relational:
	//	Implies ({Iff.left=current} "<=>" right=Implies)*;
	public IffElements getIffAccess() {
		return pIff;
	}
	
	public ParserRule getIffRule() {
		return getIffAccess().getRule();
	}
	
	//Implies Relational:
	//	Or ({Implies.left=current} "=>" right=Or)*;
	public ImpliesElements getImpliesAccess() {
		return pImplies;
	}
	
	public ParserRule getImpliesRule() {
		return getImpliesAccess().getRule();
	}
	
	//Or Relational:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And Relational:
	//	Equality ({And.left=current} "AND" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//Equality Relational:
	//	Comparison ({Equality.left=current} op=("=" | "!=") right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//Comparison Relational:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//PlusOrMinus Relational:
	//	MulOrDiv (({Plus.left=current} '+' | {Minus.left=current} '-') right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return pPlusOrMinus;
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}
	
	//MulOrDiv Relational:
	//	Primary ({MulOrDiv.left=current} op=('*' | '/' | 'mod') right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return pMulOrDiv;
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}
	
	////FIXME the assign production was commented to solve an inconsistency
	//Primary Relational:
	//	'(' Relational ')' | {Negation} "~" expression=Primary | {UnaryFunction} op=('abs' | 'sqrt') expression=Primary |
	//	{Instances} 'instances' '(' element=[ElmDeclaration] ',' number=INT ')' | {Entailed} 'entailed' '('
	//	element=[ElmDeclaration] ')' | {Selected} 'selected' '(' element=[ElmDeclaration] ')' | {BinaryFunction} op=('pow' |
	//	'dist' | 'min' | 'max' | 'if') '(' left=Primary ',' right=Primary ')' | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Atomic Relational:
	//	{BoolConstant} value=('true' | 'false') | {VariableRef} variable=[ElmDeclaration] | {AttributeRef}
	//	attribute=QualifiedName | {SymbolConstant} value=STRING | {IntConstant} value=INT;
	public AtomicElements getAtomicAccess() {
		return pAtomic;
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}
	
	////extender para otros modelos
	//QualifiedName:
	//	element=[ElmDeclaration] '.' att=[ElmDeclaration];
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//// Coffee Junior
	//// QualifiedName:
	//// ID ("." ID)* 
	//// ;
	//Operations:
	//	op+=Operation (','+ op+=Operation)*;
	public OperationsElements getOperationsAccess() {
		return pOperations;
	}
	
	public ParserRule getOperationsRule() {
		return getOperationsAccess().getRule();
	}
	
	//Operation:
	//	Sample;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Sample Operation:
	//	{SingleInstruction} name=OperationName | {ValidConf} 'validConfiguration' '(' valuations=ListOfValuation ')';
	public SampleElements getSampleAccess() {
		return pSample;
	}
	
	public ParserRule getSampleRule() {
		return getSampleAccess().getRule();
	}
	
	//OperationName:
	//	'validModel' | 'numberOfConfigurations' | 'findConfiguration' | 'findAllConfigurations';
	public OperationNameElements getOperationNameAccess() {
		return pOperationName;
	}
	
	public ParserRule getOperationNameRule() {
		return getOperationNameAccess().getRule();
	}
	
	/////**
	//// * Global constraints
	//// */
	////Global:
	////	op=GlobalOp '(' vars=ListOfIDs ')'   ( '[' values= ListOfListValues ']')? 
	////	;
	//// syntactic categories
	////
	////BoolVal: value=('true'|'false');
	////Number: value = INT ;
	////
	////Symbol:  value=STRING;
	////
	////Value: 
	////	Number|BoolVal|Symbol
	////;	
	////
	////DataType:
	////	 'boolean' |'integer'|'symbolic' ;
	//ListOfValues:
	//	values+=Relational (','+ values+=Relational)*
	//	//values+= Value (',' + values+= Value)*
	//;
	public ListOfValuesElements getListOfValuesAccess() {
		return pListOfValues;
	}
	
	public ParserRule getListOfValuesRule() {
		return getListOfValuesAccess().getRule();
	}
	
	//ListOfIDs:
	//	{ListOfIDs} values+=[ElmDeclaration] (','+ values+=[ElmDeclaration])*;
	public ListOfIDsElements getListOfIDsAccess() {
		return pListOfIDs;
	}
	
	public ParserRule getListOfIDsRule() {
		return getListOfIDsAccess().getRule();
	}
	
	//ListOfRelRefs:
	//	{ListOfRelRefs} ids+=[RelDeclaration] (','+ ids+=[RelDeclaration])*;
	public ListOfRelRefsElements getListOfRelRefsAccess() {
		return pListOfRelRefs;
	}
	
	public ParserRule getListOfRelRefsRule() {
		return getListOfRelRefsAccess().getRule();
	}
	
	//MixedList:
	//	{MixedList} ids+=[NamedItem] (','+ ids+=[NamedItem])*;
	public MixedListElements getMixedListAccess() {
		return pMixedList;
	}
	
	public ParserRule getMixedListRule() {
		return getMixedListAccess().getRule();
	}
	
	//NamedItem:
	//	ElmDeclaration | RelDeclaration;
	public NamedItemElements getNamedItemAccess() {
		return pNamedItem;
	}
	
	public ParserRule getNamedItemRule() {
		return getNamedItemAccess().getRule();
	}
	
	//// For configuration
	//Valuation: //FIXME Value for relational
	//	'(' element=[ElmDeclaration] ',' value=Relational ')' //value= Value ')'
	//;
	public ValuationElements getValuationAccess() {
		return pValuation;
	}
	
	public ParserRule getValuationRule() {
		return getValuationAccess().getRule();
	}
	
	//ListOfValuation:
	//	pairs+=Valuation (','+ pairs+=Valuation)*;
	public ListOfValuationElements getListOfValuationAccess() {
		return pListOfValuation;
	}
	
	public ParserRule getListOfValuationRule() {
		return getListOfValuationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
